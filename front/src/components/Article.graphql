fragment basicVersionFields on Version {
  _id
  version
  revision
  message
  createdAt
  owner {
    displayName
    username
  }
  type
}

query renameArticle($articleId: ID!, $title: String!) {
  article(article: $articleId) {
    rename(title: $title)
  }
}

query linkToZotero($articleId: ID!, $zotero: String!) {
  article(article: $articleId) {
    setZoteroLink(zotero: $zotero)
  }
}

query getArticleVersions($articleId: ID!) {
  article(article: $articleId) {
    versions {
      _id
      message
      revision
      version
      type
      createdAt
    }
  }
}

query getArticleWorkspaces($articleId: ID!) {
  article(article: $articleId) {
    workspaces {
      _id
      color
      name
    }
  }
}

query getArticleContributors($articleId: ID!) {
  article(article: $articleId) {
    contributors {
      user {
        _id
        email
        username
        displayName
      }
    }
  }
}

query deleteArticle($articleId: ID!) {
  article(article: $articleId) {
    delete(dryRun: false)
  }
}

mutation duplicateArticle($user: ID, $articleId: ID!, $to: ID!) {
  duplicateArticle(article: $articleId, to: $to, user: $user) {
    _id
    title
    createdAt
    updatedAt
  }
}

query addTags($articleId: ID!, $tags: [ID]!) {
  article(article: $articleId) {
    addTags(tags: $tags) {
      _id
      name
      color
    }
  }
}

query removeTags($articleId: ID!, $tags: [ID]!) {
  article(article: $articleId) {
    removeTags(tags: $tags) {
      _id
      name
      color
    }
  }
}

query getArticleInfo($articleId: ID!) {
  article(article: $articleId) {
    title

    workingVersion {
      bibPreview
    }
  }
}

query getArticleTags($articleId: ID!) {
  article(article: $articleId) {
    tags {
      _id
      name
      color
    }
  }
}

query updateWorkingVersion($articleId: ID!, $content: WorkingVersionInput!) {
  article(article: $articleId) {
    updateWorkingVersion(content: $content) {
      updatedAt
    }
  }
}

query getArticleWorkingCopy($articleId: ID!) {
  article(article: $articleId) {
    _id
    title
    zoteroLink
    updatedAt

    workingVersion {
      md
      bib
      bibPreview
      metadata
    }
  }
}

query getEditableArticle($article: ID!, $hasVersion: Boolean!, $version: ID!) {
  article(article: $article) {
    _id
    title
    zoteroLink
    updatedAt

    # actually, as we do not request new article data when switching from WRITE to PREVIEW
    # we skip this data fetching optimization for now
    # css @include(if: $isPreview)
    preview {
      stylesheet
      template
    }

    owner {
      displayName
      username
    }

    contributors {
      user {
        displayName
        username
      }
    }

    versions {
      ...basicVersionFields
    }

    workingVersion @skip(if: $hasVersion) {
      md
      bib
      bibPreview
      metadata
    }
  }

  version(version: $version) @include(if: $hasVersion) {
    ...basicVersionFields
    md
    bib
    bibPreview
    metadata
  }
}
