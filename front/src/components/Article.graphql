fragment articleBasicFields on Article {
  _id
  title
  updatedAt

  owner {
    _id
    displayName
    username
  }

  contributors {
    user {
      _id
      email
      username
      displayName
    }
  }
}

fragment articleDetailedFields on Article {
  ...articleBasicFields

  tags {
    _id
    color
    name
  }

  versions {
    _id
    message
    revision
    version
    type
    createdAt
  }

  workspaces {
    _id
    color
    name
  }

  corpuses {
    _id
    name
  }
}

fragment articleVersionFields on Article {
  versions {
    _id
    message
    revision
    version
    type
    createdAt
  }
}

query renameArticle($article: ID!, $title: String!) {
  article(article: $article) {
    rename(title: $title)

    ...articleDetailedFields
  }
}

query linkToZotero($article: ID!, $zotero: String!) {
  article(article: $article) {
    setZoteroLink(zotero: $zotero)
  }
}

query getArticleVersions($articleId: ID!) {
  article(article: $articleId) {
    ...articleVersionFields
  }
}

query getArticleWorkspaces($articleId: ID!) {
  article(article: $articleId) {
    workspaces {
      _id
      color
      name
    }
  }
}

query getArticleDetails($articleId: ID!, $corpusFilters: FilterCorpusInput) {
  article(article: $articleId) {
    ...articleDetailedFields
  }

  tags {
    _id
    name
    color
  }

  workspaces {
    _id
    name
    color
  }

  corpus(filter: $corpusFilters) {
    _id
    name
    description
    creator {
      _id
      displayName
      username
      email
    }
    metadata
    articles {
      article {
        _id
      }
    }
    createdAt
    updatedAt
  }
}

query getArticleContributors($articleId: ID!) {
  article(article: $articleId) {
    contributors {
      user {
        _id
        email
        username
        displayName
      }
    }
  }
}

query deleteArticle($article: ID!) {
  article(article: $article) {
    delete(dryRun: false)
  }
}

mutation duplicateArticle($user: ID, $article: ID!, $to: ID!) {
  duplicateArticle(article: $article, to: $to, user: $user) {
    _id
    title
    createdAt
    updatedAt
  }
}

query addTags($article: ID!, $tags: [ID]!) {
  article(article: $article) {
    addTags(tags: $tags) {
      _id
      name
      color
    }
  }
}

query removeTags($article: ID!, $tags: [ID]!) {
  article(article: $article) {
    removeTags(tags: $tags) {
      _id
      name
      color
    }
  }
}

query getArticleInfo($articleId: ID!) {
  article(article: $articleId) {
    title

    workingVersion {
      bibPreview
    }
  }
}

query getArticleTags($articleId: ID!) {
  article(article: $articleId) {
    tags {
      _id
      name
      color
    }
  }
}

mutation startCollaborativeSession($articleId: ID!) {
  article(articleId: $articleId) {
    startCollaborativeSession {
      id
    }
  }
}

mutation addArticleToWorkspace($workspaceId: ID!, $articleId: ID!) {
  workspace(workspaceId: $workspaceId) {
    addArticle(articleId: $articleId) {
      _id
    }
  }
}

mutation removeArticleFromWorkspace($workspaceId: ID!, $articleId: ID!) {
  workspace(workspaceId: $workspaceId) {
    article(articleId: $articleId) {
      remove {
        _id
      }
    }
  }
}
