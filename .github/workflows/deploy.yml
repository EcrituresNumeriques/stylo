name: Build and deploy

on:
  push:
    branches:
    - 'master'
    - 'issue-131-publish-docker'
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v2.1.3
    paths-ignore:
    - 'docs/**'
    - '*.md'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    # via https://github.community/t/how-to-get-just-the-tag-name/16241/10
    - name: Compute tag name
      id: branch
      run: |
        echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}

    # GCR_PAT requires 2 steps:
    # 1. Creating the token: https://github.com/settings/tokens/new?scopes=write:packages,read:packages,delete:packages&description=Stylo%20Container%20Deployment
    # 2. Setting it on: https://github.com/EcrituresNumeriques/settings/secrets/actions/new
#    - name: Build images
#      id: build
#      run: |
#        cp stylo-example.env stylo.env
#        docker-compose build
#        echo ${{ secrets.GCR_PAT }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
#
#    - name: Publish images
#      id: publish
#      run: |
#        docker tag ghcr.io/ecrituresnumeriques/stylo-graphql ghcr.io/ecrituresnumeriques/stylo-graphql:${PUBLISH_TAG}
#        docker tag ghcr.io/ecrituresnumeriques/stylo-front ghcr.io/ecrituresnumeriques/stylo-front:${PUBLISH_TAG}
#        docker tag ghcr.io/ecrituresnumeriques/stylo-export ghcr.io/ecrituresnumeriques/stylo-export:${PUBLISH_TAG}
#
#        docker push ghcr.io/ecrituresnumeriques/stylo-graphql:${PUBLISH_TAG}
#        docker push ghcr.io/ecrituresnumeriques/stylo-front:${PUBLISH_TAG}
#        docker push ghcr.io/ecrituresnumeriques/stylo-export:${PUBLISH_TAG}
#      env:
#        PUBLISH_TAG: ${{ steps.branch.outputs.SOURCE_NAME }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Compute target environment name
      id: target
      run: |
        echo "${GITHUB_REF}"
        if [[ "${GITHUB_REF}" =~ "refs/tags/v" ]]; then
          echo "prod!"
          echo ::set-output name=TARGET_ENV_NAME::prod
        else
          echo "dev"
          echo ::set-output name=TARGET_ENV_NAME::dev
        fi

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ansible==2.9.7 requests

    - name: Set Ansible config secrets
      run: |
        if [[ "${TARGET_ENV_NAME}" = "prod" ]]; then
          echo "${{ secrets.ANSIBLE_VAULT_PASSWORD_PROD }}" > infrastructure/.ansible-vault-password
        else
          echo "${{ secrets.ANSIBLE_VAULT_PASSWORD_DEV }}" > infrastructure/.ansible-vault-password
        fi
      env:
        TARGET_ENV_NAME: ${{ steps.target.outputs.TARGET_ENV_NAME }}

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        if [[ "${TARGET_ENV_NAME}" = "prod" ]]; then
          echo "${{ secrets.SSH_PRIVATE_KEY_PROD }}" > ~/.ssh/id_ed25519
        else
          echo "${{ secrets.SSH_PRIVATE_KEY_DEV }}" > ~/.ssh/id_ed25519
        fi
        chmod 600 ~/.ssh/id_ed25519
      env:
        TARGET_ENV_NAME: ${{ steps.target.outputs.TARGET_ENV_NAME }}

    - name: Run playbook
      working-directory: ./infrastructure
      run: ansible-playbook -i "inventories/${TARGET_ENV_NAME}" --extra-vars "@vault-${TARGET_ENV_NAME}.yml" --extra-var "app_version=${GITHUB_REF#refs/*/}" --private-key ~/.ssh/id_ed25519 --vault-password-file ./.ansible-vault-password playbook.yml -v
      env:
        TARGET_ENV_NAME: ${{ steps.target.outputs.TARGET_ENV_NAME }}
